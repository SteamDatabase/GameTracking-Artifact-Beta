{
	testkv3_Diagnostic.simple_beep = 
	{
		type = "core_simple_3d"
	}
	testkv3_Diagnostic.AAAAA_editTESTER = 
	{
		type = "core_start_simple_oneshot"
		volume = 0.500000
		vsnd_files = "sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd"
	}
	testkv3_Diagnostic.Bell.Spatial.Center = 
	{
		type = "src1_3d"
		vsnd_files = "sounds/diagnostics/bell.vsnd"
	}
	testkv3_Diagnostic.Bell.Spatial.30FeetY = 
	{
		type = "src1_3d"
		position = 
		[
			0.000000,
			360.000000,
			64.000000,
		]
		vsnd_files = "sounds/diagnostics/bell.vsnd"
	}
	testkv3_Diagnostic.timed_beeper = 
	{
		type = "diagnostic.timed_beeper"
		pitch = 1.000000
		vsnd_files = "sounds/diagnostics/beep.vsnd"
	}
	testkv3_Diagnostic.update_test_reference_op = 
	{
		type = "core_start_simple_oneshot"
		volume = 0.500000
		vsnd_files = "sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd"
	}
	testkv3_Diagnostic.update_test_start_stack_vsnd_rand_oneshot = 
	{
		type = "update_test_start_stack_vsnd_rand_oneshot"
		file_list_stack_name = "diagnostics_vsnd_lists"
		file_list_operator_name = "bird_variations"
		file_list_field_name = "vsnd_files"
	}
	testkv3_Diagnostic.update_test_start_vsnd_rand_oneshot = 
	{
		type = "update_test_start_vsnd_rand_oneshot"
		delay = 0.000000
		vsnd_files = 
		[
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01b.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02b.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird03.vsnd",
		]
	}
	testkv3_Diagnostic.update_test_start_event_vsnd_rand_oneshot = 
	{
		type = "update_test_start_event_vsnd_rand_oneshot"
		delay = 0.000000
		vsnd_files = 
		[
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01b.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02b.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird03.vsnd",
		]
	}
	testkv3_Diagnostic.update_test_start_event_vsnd_rand_weighted_oneshot = 
	{
		type = "update_test_start_event_vsnd_rand_weighted_oneshot"
		delay = 0.000000
		vsnd_files = 
		[
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01b.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02b.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird03.vsnd",
		]
		weights = 
		[
			1.000000,
			2.000000,
			3.000000,
			4.000000,
			5.000000,
		]
	}
	testkv3_Diagnostic.update_test_start_vsnd_lfo = 
	{
		type = "update_test_start_vsnd_lfo"
	}
	testkv3_Diagnostic.update_test_start_vsnd_flo = 
	{
		type = "update_test_start_vsnd_lfo"
	}
	testkv3_Diagnostic.update_test_convar = 
	{
		type = "update_test_convar"
	}
	testkv3_Diagnostic.update_test_delta = 
	{
		type = "update_test_delta"
	}
	testkv3_Diagnostic.update_test_entity_info = 
	{
		type = "update_test_entity_info"
	}
	testkv3_Diagnostic.update_test_falloff = 
	{
		type = "update_test_falloff"
	}
	testkv3_Diagnostic.update_test_float_filter = 
	{
		type = "update_test_float_filter"
	}
	testkv3_Diagnostic.update_test_opvar = 
	{
		type = "update_test_opvar"
	}
	testkv3_Diagnostic.update_test_opvar_stack_sequence = 
	{
		type = "update_test_opvar_stack_sequence"
	}
	testkv3_Diagnostic.update_test_opvar_event_sequence = 
	{
		type = "update_test_opvar_event_sequence"
		float_sequence = 
		[
			1.000000,
			2.000000,
			3.000000,
			4.000000,
			5.000000,
			6.000000,
			7.000000,
			8.000000,
			9.000000,
		]
	}
	testkv3_Diagnostic.update_test_opvar_global_stack_sequence = 
	{
		type = "update_test_opvar_global_stack_sequence"
	}
	testkv3_Diagnostic.update_test_array_index_global_stack_sequence = 
	{
		type = "update_test_array_index_global_stack_sequence"
	}
	testkv3_Diagnostic.update_test_array_index_event_sequence = 
	{
		type = "update_test_array_index_event_sequence"
		float_sequence = 
		[
			1.000000,
			2.000000,
			3.000000,
			4.000000,
			5.000000,
			6.000000,
			7.000000,
			8.000000,
			9.000000,
		]
	}
	testkv3_Diagnostic.update_test_array_index_event_increment = 
	{
		type = "update_test_array_index_event_increment"
		float_sequence = 
		[
			1.000000,
			2.000000,
			3.000000,
			4.000000,
			5.000000,
			6.000000,
			7.000000,
			8.000000,
			9.000000,
		]
	}
	testkv3_Diagnostic.update_test_array_index_stack_increment = 
	{
		type = "update_test_array_index_stack_increment"
		float_sequence = 0.000000
	}
	testkv3_Diagnostic.update_test_utils = 
	{
		type = "update_test_utils"
	}
	testkv3_Diagnostic.update_test_math_string = 
	{
		type = "update_test_math_string"
	}
	testkv3_Diagnostic.update_test_calc_distance = 
	{
		type = "update_test_calc_distance"
	}
	testkv3_Diagnostic.update_test_listener_velocity = 
	{
		type = "update_test_listener_velocity"
	}
	testkv3_Diagnostic.test_goto_exit = 
	{
		type = "test_goto_exit"
	}
	testkv3_Diagnostic.test_goto_loop_head = 
	{
		type = "test_goto_loop_head"
	}
	testkv3_Diagnostic.test_goto_loop_operator = 
	{
		type = "test_goto_loop_operator"
	}
	testkv3_Diagnostic.update_test_simple_import_op = 
	{
		type = "update_test_simple_import_op"
	}
	testkv3_Diagnostic.update_test_simple_serial_import_op = 
	{
		type = "update_test_simple_serial_import_op"
	}
	testkv3_Diagnostic.test_soundevent_limiter_lfo = 
	{
		type = "test_soundevent_limiter_lfo"
		max_count = 0.000000
		match_substring = 1.000000
		invert_match = 1.000000
	}
	testkv3_Diagnostic.test_stop_soundevents_lfo_at_time = 
	{
		type = "test_soundevent_control_lfo_stop_at_time"
	}
	testkv3_Diagnostic.test_soundevent_block = 
	{
		type = "test_soundevent_block"
		duration = 10.000000
		match_substring = 0.000000
		match_event_name = "Diagnostic.test_soundevent_block"
	}
	testkv3_Diagnostic.test_soundevent_start_oneshot = 
	{
		type = "test_soundevent_start_oneshot"
		duration = 5.000000
	}
	testkv3_Diagnostic.test_soundevent_start_lfo = 
	{
		type = "test_soundevent_start_lfo"
		time = 17.000000
	}
	testkv3_Diagnostic.test_soundevent_start_opvar_get_parent = 
	{
		type = "test_soundevent_start_opvar_get_parent"
	}
	testkv3_Diagnostic.test_get_parent_space = 
	{
		type = "test_get_parent_space"
	}
	testkv3_Diagnostic.test_import_get_parent_space = 
	{
		type = "test_import_get_parent_space"
	}
	testkv3_Diagnostic.test_random_multiple = 
	{
		type = "test_random_multiple"
	}
	testkv3_Diagnostic.test_import_random_multiple = 
	{
		type = "test_import_random_multiple"
	}
	testkv3_Diagnostic.test_soundevent_start_random_multiple = 
	{
		type = "test_soundevent_start_random_multiple"
	}
	testkv3_Diagnostic.test_beep_on_track_priority_1 = 
	{
		type = "test_beep_on_track"
		track = "track_1"
		priority = 1.000000
		pitch = 0.950000
		sync_track = "track_1"
		sync_field = "public.sync_points"
		start_point = 1.000000
		end_point = 8.000000
		sync_points = 
		[
			1.000000,
			2.000000,
			3.000000,
			4.000000,
			5.000000,
			6.000000,
			7.000000,
			8.000000,
		]
	}
	testkv3_Diagnostic.test_beep_on_track_priority_2 = 
	{
		type = "test_beep_on_track"
		track = "track_1"
		priority = 2.000000
		pitch = 1.000000
	}
	testkv3_Diagnostic.test_beep_on_track_priority_3 = 
	{
		type = "test_beep_on_track"
		track = "track_1"
		priority = 3.000000
		pitch = 1.050000
	}
	testkv3_Diagnostic.test_beep_on_track_priority_1_override = 
	{
		type = "test_beep_on_track"
		track = "track_1"
		priority = 1.000000
		priority_override = 1.000000
		pitch = 1.100000
	}
	testkv3_Diagnostic.test_beep_on_track_priority_1_block_equal = 
	{
		type = "test_beep_on_track"
		track = "track_1"
		priority = 1.000000
		block_equal_priority = 1.000000
		pitch = 1.150000
	}
	testkv3_Diagnostic.test_beep_on_track2_priority_1 = 
	{
		type = "test_beep_on_track"
		track = "track_2"
		priority = 1.000000
		pitch = 0.950000
	}
	testkv3_Diagnostic.test_beep_on_track2_priority_2 = 
	{
		type = "test_beep_on_track"
		track = "track_2"
		priority = 2.000000
		pitch = 1.000000
	}
	testkv3_Diagnostic.test_vsnd_on_track_priority_1 = 
	{
		type = "test_vsnd_on_track"
		priority = 1.000000
		block_equal_priority = 1.000000
		pitch = 1.150000
		vsnd_files = "sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd"
	}
	testkv3_Diagnostic.test_vsnd_on_track_priority_1_sync = 
	{
		type = "test_vsnd_on_track"
		priority = 1.000000
		block_equal_priority = 1.000000
		pitch = 1.150000
		sync_track = "track_1"
		sync_field = "public.sync_points"
		track = "default_track"
		vsnd_files = "sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd"
	}
	testkv3_Diagnostic.test_stop_default_track = 
	{
		type = "test_stop_track"
		track = "default_track"
	}
	testkv3_Diagnostic.test_stop_track_1 = 
	{
		type = "test_stop_track"
		track = "track_1"
	}
	testkv3_Diagnostic.test_stop_track_2 = 
	{
		type = "test_stop_track"
		track = "track_2"
	}
	testkv3_Diagnostic.test_soundevent_field_override = 
	{
		type = "test_soundevent_field_override"
	}
	testkv3_Diagnostic.core_start_simple_oneshot = 
	{
		type = "core_start_simple_oneshot"
		volume = 0.500000
		vsnd_files = "sounds/diagnostics/bell.vsnd"
	}
	testkv3_Diagnostic.core_start_oneshot = 
	{
		type = "core_start_oneshot"
		volume_min = 0.100000
		volume_max = 1.000000
		pitch_min = 0.500000
		pitch_max = 1.500000
		vsnd_files = "sounds/diagnostics/bell.vsnd"
	}
	testkv3_Diagnostic.src1_3d = 
	{
		type = "src1_3d"
		pitch_rand_min = -0.100000
		vsnd_files = "sounds/diagnostics/bell.vsnd"
	}
	testkv3_New1 = 
	{
		type = "core_valve_default"
	}
}